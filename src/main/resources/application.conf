kamon {
  # What should be recorded
  metrics {
   tick-interval = 1 second
   filters = [
    {
      # actors we should be monitoring
      actor {
        includes = [ "sprastic-actor-system/user/*", "sprastic-actor-system/user/worker-*"] #  a list of what should be included
        excludes = [ "system/*"] # a list of what should be excluded
      }
    },
    {
       trace {
        includes = [ "*" ]
        excludes = []
       }
    }
   ]
   log-reporter {
    # Enable system metrics
    # In order to not get a ClassNotFoundException, we must register the kamon-system-metrics module
    report-system-metrics = true
   }
  }
  # ~~~~~ StatsD configuration ~~~~~~
  statsd {
    # Hostname and port in which your statsD is running. Remember 
    # that statsd packets are sent using  UDP and setting
    # unreachable hosts and/or not open ports wont be 
    # warned by the Kamon, your data wont go anywhere
    #    hostname = "127.0.0.1"
    hostname = "192.168.59.103"
    port = 8125

    # Interval between metrics data flushes to StatsD.
    # It's value must be equal or greater than the
    # kamon.metrics.tick-interval setting.
    flush-interval = 1 second

    # Max packet size for UDP metrics data sent to statsD
    max-packet-size = 1024 bytes

    # Subscription patterns used to select which metrics will
    # be pushed to statsD. Note that first, metrics 
    # collection for your desired entities must be activated
    # under the kamon.metrics.filters settings.
    includes {
      actor = ["*"]
      trace = ["*"]
      dispatcher = ["*"]
    }
    
    report-system-metrics = true

    simple-metric-key-generator {
      # Application prefix for all metrics pushed to statsD.
      # The default namespacing scheme for metrics follows
      # this pattern: application.host.entity.entity-name.metric-name
      application = "sprastic"
    }
  }
}

akka {
  extensions = ["kamon.statsd.StatsD", "kamon.system.SystemMetrics", "kamon.logreporter.LogReporter"]
  loggers = [akka.event.slf4j.Slf4jLogger]
  loglevel = debug
  actor {
    debug {
      receive = on
      lifecycle = on
    }
  }
}

aktic {
  host = "localhost"
  port = 9200
}
